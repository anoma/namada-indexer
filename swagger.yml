openapi: '3.0.2'
info:
  title: Namada Interface Indexer REST Api
  version: '0.1'
  description: "Set of API to interact with a namada indexer."
  contact: 
    email: hello@heliax.dev
    url: https://github.com/anoma/namada-indexer
servers:
  - url: http://localhost:5000
paths:
  /health:
    get:
      responses:
        '200':
          description: Health check
  /api/v1/pos/validator:
    get:
      responses:
        '200':
          description: A list of validator.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Validator'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                        minimum: 0
                      per_page:
                        type: integer
                        minimum: 0
                      total_pages:
                        type: integer
                        minimum: 0
                      total_items:
                        type: integer
                        minimum: 0
  /api/v1/pos/reward/{address}:
    get:
      summary: Get all the rewards for an address
      parameters:
        - in: path
          name: address
          schema:
            type: string
          required: true
          description: The delegator address
      responses:
        '200':
          description: A list of rewards.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reward'
  /api/v1/pos/bond/{address}:
    get:
      summary: Get all the bonds for an address
      parameters:
        - in: path
          name: address
          schema:
            type: string
          required: true
          description: The delegator address
      responses:
        '200':
          description: A list of bonds.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bond'
  /api/v1/pos/unbond/{address}:
    get:
      summary: Get all the unbonds for an an address
      parameters:
        - in: path
          name: address
          schema:
            type: string
          required: true
          description: The delegator address
      responses:
        '200':
          description: A list of bonds.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Unbond'
  /api/v1/pos/withdraw/{address}/{epoch}:
    get:
      summary: Get all the withdraws for an address at a specific epoch
      parameters:
        - in: path
          name: address
          schema:
            type: string
          required: true
          description: The delegator address
        - in: path
          name: epoch
          schema:
            type: integer
          required: true
          description: The epoch
      responses:
        '200':
          description: A list of withdraws.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Withdraw'  
  /api/v1/gov/proposal:
    get:
      summary: Get a list of governance proposals
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
          description: Pagination parameter 
        - in: query
          name: status
          schema:
            type: string
            enum: [pending, voting, passed, rejected]
          description: The status of the proposal
      responses:
        '200':
          description: A list of governance proposal.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Proposal'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                        minimum: 0
                      per_page:
                        type: integer
                        minimum: 0
                      total_pages:
                        type: integer
                        minimum: 0
                      total_items:
                        type: integer
                        minimum: 0
  /api/v1/gov/search/{text}:
    get:
      summary: Get a list of governance proposals matching a text in the title
      parameters:
        - in: query
          name: page
          schema: 
            type: integer
            minimum: 0
            description: Pagination parameter
        - in: path
          name: text
          schema:
            type: string
            minimum: 3
          required: true
          description: The text to match against the proposal title
      responses:
        '200':
          description: A list of governance proposal matching the text.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Proposal'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                        minimum: 0
                      per_page:
                        type: integer
                        minimum: 0
                      total_pages:
                        type: integer
                        minimum: 0
                      total_items:
                        type: integer
                        minimum: 0
  /api/v1/gov/proposal/{id}:
    get:
      summary: Get a governance proposal by proposal id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            minimum: 0
          required: true
          description: Proposal id
      responses:
        '200':
          description: A Governance proposal.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proposal'
  /api/v1/gov/proposal/{id}/votes:
    get:
      summary: Get all the votes for a governance proposal
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            minimum: 1
          required: true
          description: Proposal id
      responses:
        '200':
          description: A list of votes for a govenance proposal.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Vote'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                        minimum: 0
                      per_page:
                        type: integer
                        minimum: 0
                      total_pages:
                        type: integer
                        minimum: 0
                      total_items:
                        type: integer
                        minimum: 0
  /api/v1/gov/proposal/{id}/votes/{address}:
    get:
      summary: Get all the votes for a governance proposal from an address
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            minimum: 1
          required: true
          description: Proposal id
        - in: path
          name: address
          schema:
            type: string
          required: true
          description: The voter address
      responses:
        '200':
          description: A list of votes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vote'
  /api/v1/account/{address}:
    get:
      summary: Get the all the tokens balances of an address
      parameters:
        - in: path
          name: address
          schema:
            type: string
          required: true
          description: The address account
      responses:
        '200':
          description: A List of balances.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Balance'

components:
  schemas:
    Validator:
      type: object
      required: [id, address, name, voting_power, max_commission, commission]
      properties:
        id:
          type: integer
        address:
          type: string
        name:
          type: string
        voting_power:
          type: string
        max_commission:
          type: string
        commission:
          type: string
        email:
          type: string
        website:
          type: string
        description:
          type: string
        discord_handle:
          type: string
        avatar:
          type: string
    Proposal:
      type: object
      properties:
        id:
          type: integer
        content:
          type: string
        type:
          type: string
        data:
          type: string
        author:
          type: string
        startEpoch:
          type: integer
        endEpoch:
          type: integer
        activationEpoch:
          type: integer
        status:
          type: string
          enum: [pending, voting, passed, rejected]
        yayVotes:
          type: integer
        nayVotes:
          type: integer
        abstrainVotes:
          type: integer
    Vote:
      type: object
      properties:
        proposal_id:
          type: integer
        vote:
          type: string
          enum: [yay, nay, abstrain]
        voterAddress:
          type: string
    Reward:
      type: object
      properties:
        validator:
          type: object
          $ref: '#/components/schemas/Validator'
        amount:
          type: number
          format: float
          minimum: 0
    Bond:
      type: object
      properties:
        validator:
          type: object
          $ref: '#/components/schemas/Validator'
        amount:
          type: number
          format: float
          minimum: 0
    Unbond:
      type: object
      properties:
        validator:
          type: object
          $ref: '#/components/schemas/Validator'
        amount:
          type: number
          format: float
          minimum: 0
        withdrawEpoch: 
          type: integer
    Withdraw:
      type: object
      properties:
        validator:
          type: object
          $ref: '#/components/schemas/Validator'
        amount:
          type: number
          format: float
          minimum: 0
        withdrawEpoch: 
          type: integer
    Balance:
      type: object
      properties:
        token:
          type: string
        balance:
          type: number
          format: float
          minimum: 0
